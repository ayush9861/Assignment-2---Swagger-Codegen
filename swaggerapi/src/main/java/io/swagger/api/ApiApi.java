/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.35).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Courses;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-11-07T00:59:28.756715600+05:30[Asia/Calcutta]")
@Validated
public interface ApiApi {

    @Operation(summary = "Add a new course.", description = "", tags={ "Courses" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Ok") })
    @RequestMapping(value = "/api/courses/add",
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> apiCoursesAddPost(@Parameter(in = ParameterIn.DEFAULT, description = "A JSON object containing Courses information", required=true, schema=@Schema()) @Valid @RequestBody Courses body);


    @Operation(summary = "Delete a course.", description = "", tags={ "Courses" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Created") })
    @RequestMapping(value = "/api/courses/delete/{id}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> apiCoursesDeleteIdDelete(@Parameter(in = ParameterIn.PATH, description = "Delete a course.", required=true, schema=@Schema()) @PathVariable("id") String id);


    @Operation(summary = "Get all Courses.", description = "This is a Student service description", tags={ "Courses" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "This means its ok.", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Courses.class)))) })
    @RequestMapping(value = "/api/courses/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Courses>> apiCoursesGet();


    @Operation(summary = "Search a course.", description = "", tags={ "Courses" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Created") })
    @RequestMapping(value = "/api/courses/getByName/{name}",
        method = RequestMethod.GET)
    ResponseEntity<Void> apiCoursesGetByNameNameGet(@Parameter(in = ParameterIn.PATH, description = "Delete a course.", required=true, schema=@Schema()) @PathVariable("name") String name);


    @Operation(summary = "Get course by Id.", description = "", tags={ "Courses" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Created") })
    @RequestMapping(value = "/api/courses/{id}",
        method = RequestMethod.GET)
    ResponseEntity<Void> apiCoursesIdGet(@Parameter(in = ParameterIn.PATH, description = "Fetch Result for an Id.", required=true, schema=@Schema()) @PathVariable("id") String id);


    @Operation(summary = "Update a course.", description = "", tags={ "Courses" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Created") })
    @RequestMapping(value = "/api/courses/update/{id}",
        method = RequestMethod.PUT)
    ResponseEntity<Void> apiCoursesUpdateIdPut(@Parameter(in = ParameterIn.PATH, description = "Fetch Result for an Id.", required=true, schema=@Schema()) @PathVariable("id") String id);

}

