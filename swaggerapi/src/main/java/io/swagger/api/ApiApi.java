/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.35).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Server;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-11-19T15:09:32.514488200+05:30[Asia/Calcutta]")
@Validated
public interface ApiApi {

    @Operation(summary = "Add a new server.", description = "", tags={ "Server" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "This means its ok.", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Server.class)))) })
    @RequestMapping(value = "/api/server/add",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<List<Server>> apiServerAddPost(@Parameter(in = ParameterIn.DEFAULT, description = "A JSON object containing Server information", required=true, schema=@Schema()) @Valid @RequestBody Server body);


    @Operation(summary = "Delete a server.", description = "", tags={ "Server" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "This means its ok.", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Server.class)))) })
    @RequestMapping(value = "/api/server/delete/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<List<Server>> apiServerDeleteIdDelete(@Parameter(in = ParameterIn.PATH, description = "Delete a server.", required=true, schema=@Schema()) @PathVariable("id") String id);


    @Operation(summary = "Get all Servers.", description = "This is Server service description", tags={ "Server" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "This means its ok.", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Server.class)))) })
    @RequestMapping(value = "/api/server/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Server>> apiServerGet();


    @Operation(summary = "Search a server.", description = "", tags={ "Server" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "This means its ok.", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Server.class)))) })
    @RequestMapping(value = "/api/server/getByName/{name}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Server>> apiServerGetByNameNameGet(@Parameter(in = ParameterIn.PATH, description = "Delete a server.", required=true, schema=@Schema()) @PathVariable("name") String name);


    @Operation(summary = "Get server by Id.", description = "", tags={ "Server" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "This means its ok.", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Server.class)))) })
    @RequestMapping(value = "/api/server/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Server>> apiServerIdGet(@Parameter(in = ParameterIn.PATH, description = "Fetch Result for an Id.", required=true, schema=@Schema()) @PathVariable("id") String id);


    @Operation(summary = "Update a server.", description = "", tags={ "Server" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "This means its ok.", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Server.class)))) })
    @RequestMapping(value = "/api/server/update/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<List<Server>> apiServerUpdateIdPut(@Parameter(in = ParameterIn.PATH, description = "Fetch Result for an Id.", required=true, schema=@Schema()) @PathVariable("id") String id);

}

